                           _  _              _               
 _ __   _   _   ___  ___  | || |  ___   ___ | |_  ___   _ __ 
| '_ \ | | | | / __|/ _ \ | || | / _ \ / __|| __|/ _ \ | '__|
| |_) || |_| || (__| (_) || || ||  __/| (__ | |_| (_) || |   
| .__/  \__, | \___|\___/ |_||_| \___| \___| \__|\___/ |_|   
|_|     |___/                                   by Intelie   

                           Collecting data should be simple.

--------
| Goal |
--------

Moving data from A to B is a well known task in computing.
Our aim here is to make it easier to 'develop' and 'configure' a piece of 
software to collect data.


----------------
| How it works |
----------------

There are two main components of any collecting process:

- Readers
  Piece of code that takes the responsability of going to the source of the
  data and prepare it to be written somewhere else.

- Writers
  Piece of code that takes a read message and delivers to the destiny.

A pair reader/writer is called collecting unit.
Readers and writers may make any transformation to the original data.


----------------
| Architecture |
----------------
 
Collecting unit architecture:

 1. ask source________                         _________   5. write destiny
    <-------|        |                         |        |------------------>
            | Reader |                         | Writer |
    ------->|________|                    +--->|________|
   2. answer    |                         |
                |            __________   | 4. get stored msgs
                +---------->|          |--+
                 3.store    | internal |
                            |  queue   |
                            |__________|

It is possible to configure as many collecting units as needed.


--------------
| How to use | 
--------------

There are two ways to use it.
 - configuring
   you may configure a predefined reader/writer for you needs.

 - development
   you may adapt an existing reader/writer or code a new one.


----------------
| Current step |
---------------- 

Improving core;
Increasing test coverage.
