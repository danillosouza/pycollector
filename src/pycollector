#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    File: pycollector
    Description: Collector daemon.
"""

__software__ = "pycollector"
__desc__ = "Generic collector written in Python."
__version_info__ = ('0', '1', '6')
__version__ = '.'.join(__version_info__)

__author__ = "Ronald Kaiser"
__email__ = "ronald at intelie dot com dot br"


try:
    import sys, os
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append('../conf')
except Exception, e:
    print e
    exit(-1)


import optparse
import subprocess

from helpers import daemon
from util import daemon_util

import ascii
from rwtypes import rwtypes
import daemon_conf
from collector import Collector


DAEMON=True
SERVER=True
PIDPATH_DEFAULT=os.path.join(os.path.dirname(__file__), "pycollector.pid")
LOGGING_PATH_DEFAULT=os.path.join(os.path.dirname(__file__), "logs", "")


def disable_daemon(option, ospt, value, parser):
    global DAEMON
    DAEMON = False


def disable_server(option, opt, value, parser):
    global SERVER
    SERVER = False


def status(option, opt, value, parser):
    try:
        pidpath = daemon_conf.PID_PATH
    except AttributeError:
        pidpath = PIDPATH_DEFAULT 
    if not daemon_util.is_running()[0]:
        print "Status: NOT RUNNING."
        if os.path.exists(pidpath):
            print "WARNING: Pidfile in %s seems to be obsolete. Please, remove it manually." % pidpath
            sys.exit(-1)
        sys.exit(0)
    print "Status: RUNNING."
    sys.exit(0)


def start(option, opt, value, parser):
    if daemon_util.is_running()[0]:
        print "Daemon already running."
        sys.exit(-1)
    else:
        print "Starting daemon..."

        try:
            logging_path = daemon_conf.LOGGING_PATH
        except AttributeError:
            logging_path = LOGGING_PATH_DEFAULT

        if not daemon_util.dir_exists(logging_path): exit(-1)
        c = Collector(daemon_conf, server=SERVER, to_log=True)

        print "Daemon started."
        if DAEMON:
            d = daemon.DaemonContext(working_directory=os.getcwd())
            d.open() #starts daemon context

        try:
            pidpath = daemon_conf.PID_PATH
        except AttributeError:
            pidpath = PIDPATH_DEFAULT
        daemon_util.write_pid(pidpath)

        c.start()

        if DAEMON:
            d.close()


def stop(option, opt, value, parser):
    running, pids = daemon_util.is_running()
    if not running:
        print "Daemon was not running."
        sys.exit(-1)
    else:
        try:
            pidpath = daemon_conf.PID_PATH
        except AttributeError:
            pidpath = PIDPATH_DEFAULT

        if not pidpath or not os.path.exists(pidpath):
            print "Warning: Can't get pidfile: %s. Kill it manually." % pidpath
        else: 
            try:
                print "Stopping daemon..."
                pid = daemon_util.get_pid(pidpath)
            except Exception, e:
                print "Can't read pidfile. Daemon not stopped."
                print e
                sys.exit(-1)
            try:
                if daemon_util.kill_pids([pid]) != 0:
                    print "Can't stop daemon. PID tried: %s" % pid
                    sys.exit(-1)
            except Exception, e:
                print "Can't stop daemon. PID tried: %s" % pid
                print e
                sys.exit(-1)
            else:
                try:
                    if daemon_util.remove_pidfile(pidpath) == 0:
                        print "Daemon stopped."
                    else:
                        print """
    Daemon stopped, but can't remove pidfile.\nRemove manually the file %s.""" % pidpath
                except Exception, e:
                    print e
                    print """
    Daemon stopped, but can't remove pidfile.\nRemove manually the file %s.""" % pidpath
        sys.exit(0)




def show_reader_types(option, opt, value, parser):
    keys = rwtypes.get_reader_keys()
    for key in keys:
        print "* %s" % key
    sys.exit(0)


def show_writer_types(option, opt, value, parser):
    keys = rwtypes.get_writer_keys()
    for key in keys:
        print "* %s" % key
    sys.exit(0)


if __name__ == '__main__':
    parser = optparse.OptionParser(prog=__software__, version=__version__)
    parser.set_description(__desc__)

    parser.add_option("--rtypes",
                      action="callback",
                      callback=show_reader_types,
                      nargs=0,
                      help="show reader types")

    parser.add_option("--wtypes",
                      action="callback",
                      callback=show_writer_types,
                      nargs=0,
                      help="show writer types")

    parser.add_option("--nodaemon",
                      action="callback",
                      callback=disable_daemon,
                      nargs=0,
                      help="enable collector to start without detaching the process")
    
    parser.add_option("--noserver",
                      action="callback",
                      callback=disable_server,
                      nargs=0,
                      help="disable default web server with realtime data")

    parser.add_option("--start",
                      action="callback",
                      callback=start,
                      nargs=0,
                      help="start collector")

    parser.add_option("--stop",
                      action="callback",
                      callback=stop,
                      nargs=0,
                      help="stop collector")

    parser.add_option("--status",
                      action="callback",
                      callback=status,
                      nargs=0,
                      help="check if collector is runnning.")

    if len(sys.argv) < 2:
        print ascii.ascii
        parser.print_help()
        sys.exit(0)
    elif '--help' in sys.argv:
        print ascii.ascii
    (options, args) = parser.parse_args()
