#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    File: collectord
    Description: Collector daemon.
"""

__software__ = "pycollector"
__desc__ = "Generic collector written in Python."
__version_info__ = ('0', '1', '0')
__version__ = '.'.join(__version_info__)

__author__ = "Ronald Kaiser"
__email__ = "ronald at intelie dot com dot br"


import os
import optparse
import subprocess
import sys; sys.path.append('../conf'); sys.path.append('../src')

from helpers import daemon
from util import daemon_util

import daemon_conf
from collector import Collector


DAEMON=False #run as daemon flag
pidpath_default = "../collectord.pid"
logging_path_default = "../logs/"


def toggle_daemon(option, ospt, value, parser):
    global DAEMON
    DAEMON = not DAEMON


def status(option, opt, value, parser):
    try:
        pidpath = daemon_conf.PID_PATH
    except AttributeError:
        pidpath = pidpath_default
    if not pidfile or not os.path.exists(pidfile):
        print "Status: NOT RUNNING."
    else:
        if not daemon_util.is_running()[0]:
            print "Status: NOT RUNNING."
            print "WARNING: Pidfile in %s seems to be obsolete. Please, remove it manually." % pidpath
            sys.exit(-1)
        print "Status: RUNNING."
    sys.exit(0)


def start(option, opt, value, parser):
    if daemon_util.is_running()[0]:
        print "Daemon already running."
        sys.exit(-1)
    else:
        print "Starting daemon..."

        try:
            logging_path = daemon_conf.LOGGING_PATH
        except AttributeError:
            logging_path = logging_path_default

        if not daemon_util.dir_exists(logging_path): exit(-1)
        c = Collector(daemon_conf, to_log=True)

        print "Daemon started."
        if DAEMON:
            d = daemon.DaemonContext(working_directory=os.getcwd())
            d.open() #starts daemon context

        try:
            pidpath = daemon_conf.PID_PATH
        except AttributeError:
            pidpath = pidpath_default

        daemon_util.write_pid(pidpath)
        c.start()
        if DAEMON:
            d.close()


def stop(option, opt, value, parser):
    running, pids = daemon_util.is_running()
    if not running:
        print "Daemon is not running."
        sys.exit(-1)
    else:
        try:
            pidpath = daemon_conf.PID_PATH
        except AttributeError:
            pidpath = pidfile_default
        if not pidpath or not os.path.exists(pidpath):
            print "Can't get pidfile: %s. Is it running?" % pidpath
            sys.exit(-1)
        else:
            try:
                print "Stopping daemon..."
                pid = get_pid(pidpath)
            except Exception, e:
                print "Can't read pidfile. Daemon not stopped."
                sys.exit(-1)
            try:
                if kill_pids(pids) != 0:
                    print "Can't stop daemon. PIDs tried: %s" % pids
                    sys.exit(-1)
            except Exception, e:
                print e
                print "Can't stop daemon. PIDs tried: %s" % pids
                sys.exit(-1)
            else:
                try:
                    if remove_pidfile(pidpath) == 0:
                        print "Daemon stopped."
                    else:
                        print """
    Daemon stopped, but can't remove pidfile.\nRemove manually the file %s.""" % pidpath
                except Exception, e:
                    print e
                    print """
    Daemon stopped, but can't remove pidfile.\nRemove manually the file %s.""" % pidpath
        sys.exit(0)


if __name__ == '__main__':
    import ascii
    print ascii.ascii

    parser = optparse.OptionParser(prog=__software__, version=__version__)
    parser.set_description(__desc__)

    parser.add_option("--notdaemon",
                      action="callback",
                      callback=toggle_daemon,
                      nargs=0,
                      help="starts collector without detaching the process")

    parser.add_option("--start",
                      action="callback",
                      callback=start,
                      nargs=0,
                      help="starts collector")

    parser.add_option("--stop",
                      action="callback",
                      callback=stop,
                      nargs=0,
                      help="stops collector")

    parser.add_option("--status",
                      action="callback",
                      callback=status,
                      nargs=0,
                      help="checks if collector is runnning.")


    (options, args) = parser.parse_args()

    if not args:
        parser.print_help()
